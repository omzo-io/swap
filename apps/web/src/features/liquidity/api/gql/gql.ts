/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  '\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n':
    types.PairByIdDocument,
  '\n  query Pairs(\n    $where: PairWhereInput\n    $orderBy: [PairOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    pairs(where: $where, orderBy: $orderBy, offset: $offset, limit: $limit) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n':
    types.PairsDocument,
  '\n  query CurrentLiquidityPositions(\n    $where: CurrentLiquidityPositionWhereInput\n    $orderBy: [CurrentLiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    currentLiquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        usdSwapped\n        id\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        reserve0\n        reserve1\n        liquidityUSD\n        liquidity24hDelta\n        lpTotalSupply\n        lpTotalLocked\n        token0Price\n        token1Price\n        txCount24h\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        tradeVolume24hDelta\n        fees24h\n        feesUSD24h\n        feesETH24h\n        fees24hDelta\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n        lastUpdatedAt\n      }\n      liquidityTokenBalance\n      lastUpdatedAt\n    }\n  }\n':
    types.CurrentLiquidityPositionsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n',
): (typeof documents)['\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query Pairs(\n    $where: PairWhereInput\n    $orderBy: [PairOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    pairs(where: $where, orderBy: $orderBy, offset: $offset, limit: $limit) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n',
): (typeof documents)['\n  query Pairs(\n    $where: PairWhereInput\n    $orderBy: [PairOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    pairs(where: $where, orderBy: $orderBy, offset: $offset, limit: $limit) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        priceUSD\n        priceETH\n        totalSupply\n        circulationSupply\n        marketCapUSD\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        txCount24h\n        totalLiquidityAllPairs\n        totalLiquidityAllPairsUSD\n        holders\n        lastUpdatedAt\n      }\n      reserve0\n      reserve1\n      liquidityUSD\n      liquidity24hDelta\n      lpTotalSupply\n      lpTotalLocked\n      token0Price\n      token1Price\n      txCount24h\n      tradeVolume24h\n      tradeVolumeUSD24h\n      tradeVolumeETH24h\n      tradeVolume24hDelta\n      fees24h\n      feesUSD24h\n      feesETH24h\n      fees24hDelta\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n      lastUpdatedAt\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CurrentLiquidityPositions(\n    $where: CurrentLiquidityPositionWhereInput\n    $orderBy: [CurrentLiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    currentLiquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        usdSwapped\n        id\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        reserve0\n        reserve1\n        liquidityUSD\n        liquidity24hDelta\n        lpTotalSupply\n        lpTotalLocked\n        token0Price\n        token1Price\n        txCount24h\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        tradeVolume24hDelta\n        fees24h\n        feesUSD24h\n        feesETH24h\n        fees24hDelta\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n        lastUpdatedAt\n      }\n      liquidityTokenBalance\n      lastUpdatedAt\n    }\n  }\n',
): (typeof documents)['\n  query CurrentLiquidityPositions(\n    $where: CurrentLiquidityPositionWhereInput\n    $orderBy: [CurrentLiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n  ) {\n    currentLiquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        usdSwapped\n        id\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          priceUSD\n          priceETH\n          totalSupply\n          circulationSupply\n          marketCapUSD\n          tradeVolume24h\n          tradeVolumeUSD24h\n          tradeVolumeETH24h\n          txCount24h\n          totalLiquidityAllPairs\n          totalLiquidityAllPairsUSD\n          holders\n          lastUpdatedAt\n        }\n        reserve0\n        reserve1\n        liquidityUSD\n        liquidity24hDelta\n        lpTotalSupply\n        lpTotalLocked\n        token0Price\n        token1Price\n        txCount24h\n        tradeVolume24h\n        tradeVolumeUSD24h\n        tradeVolumeETH24h\n        tradeVolume24hDelta\n        fees24h\n        feesUSD24h\n        feesETH24h\n        fees24hDelta\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n        lastUpdatedAt\n      }\n      liquidityTokenBalance\n      lastUpdatedAt\n    }\n  }\n'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
